plugins {
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '2024.0.0'
    id "de.undercouch.download" version "4.1.2"
    id "base"
}

if (project.hasProperty('buildServer')) {
    wpilibVersioning.buildServerMode = true
}

ext.addedRelease = false
wpilibVersioning.useAllTags = true

def azureRelease = System.getenv('GITHUB_REF')
if (azureRelease != null) {
    println azureRelease
    if (azureRelease.startsWith('refs/tags/')) {
        wpilibVersioning.releaseMode = true
        wpilibRepositories.addAllReleaseRepositories(project)
        ext.addedRelease = true
        println 'tagged build'
    }
}

if (!ext.addedRelease) {
    wpilibRepositories.addAllDevelopmentRepositories(project)
}

configurations {
    cppSource
    javaSource
}

dependencies {
    cppSource 'edu.wpi.first.wpilibc:examples:+:@zip'
    javaSource 'edu.wpi.first.wpilibj:examples:+:@zip'

    cppSource 'edu.wpi.first.wpilibc:templates:+:@zip'
    javaSource 'edu.wpi.first.wpilibj:templates:+:@zip'

    cppSource 'edu.wpi.first.wpilibc:commands:+:@zip'
    javaSource 'edu.wpi.first.wpilibj:commands:+:@zip'
}


task extractCppDependencies(type: Copy) {
    dependsOn configurations.cppSource

    from {
        configurations.cppSource.collect { it }
        configurations.cppSource.collect { zipTree(it) }
    }
    into 'vscode-wpilib/resources/cpp/src'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task extractJavaDependencies(type: Copy) {
    dependsOn configurations.javaSource

    from {
        configurations.javaSource.collect { zipTree(it) }
    }
    into 'vscode-wpilib/resources/java/src'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def downloadNewCommands = tasks.register('downloadNewCommands', Download) {
  src 'https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/wpilibNewCommands/WPILibNewCommands.json'
  dest 'vscode-wpilib/resources/vendordeps/WPILibNewCommands.json'
  overwrite true
}

def downloadRomiVendordep = tasks.register('downloadRomiVendordep', Download) {
  src 'https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/romiVendordep/RomiVendordep.json'
  dest 'vscode-wpilib/resources/vendordeps/RomiVendordep.json'
  overwrite true
}

def downloadXRPVendordep = tasks.register('downloadXRPVendordep', Download) {
  src 'https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/xrpVendordep/XRPVendordep.json'
  dest 'vscode-wpilib/resources/vendordeps/XRPVendordep.json'
  overwrite true
}

}

}

apply from: 'templatebuilder.gradle'


task updateAllDependencies() {
    // No dependencies required
}

if (project.hasProperty("publishVersion")) {
    wpilibVersioning.version.set(project.publishVersion)
}

wpilibVersioning.version.finalizeValue()

ext.pubVersion = wpilibVersioning.version.get()


if (pubVersion == '') {
    pubVersion = '0.0.1-unknown'
}

apply from: 'versions.gradle'

wrapper {
    gradleVersion = '8.11'
}
